plugins {
    id 'java-library'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.190'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

version = mod_version + "+" + stonecutter.current.version
group = mod_group_id

repositories {
    mavenLocal()
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.fzzyhmstrs.me/" }
    maven { url = "https://thedarkcolour.github.io/KotlinForForge/" }
    maven { url = "https://jitpack.io" }
}

base {
    archivesName = mod_id
}

subsystems {
    parchment {
        minecraftVersion = property("neogradle.subsystems.parchment.minecraftVersion")
        mappingsVersion = property("neogradle.subsystems.parchment.mappingsVersion")
    }
}

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        argument '--nogui'
    }
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

jarJar.enable()
jar {
    archiveClassifier = "slim"
}
tasks.named('jarJar') {
    archiveClassifier = ""
}

dependencies {
    implementation "net.neoforged:neoforge:${property("neo_version")}"
    implementation(jarJar("com.moulberry:mixinconstraints:${project.mixinconstraints_version}")) {
        jarJar.ranged(it, "[1.0.8,)")
    }
    implementation(jarJar("com.github.ramixin:mixson-neoforge:${project.mixson_version}")) {
        jarJar.ranged(it, "[v1.3.1,)")
    }
    implementation "me.fzzyhmstrs:fzzy_config:${property("fzzy_version")}"
    compileOnly "dev.emi:emi-neoforge:${property("emi_version")}"
    if (stonecutter.eval(stonecutter.current.version, "1.21.1")) {
        implementation "dev.emi:emi-neoforge:${property("emi_version")}"
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

publishMods {
    file = tasks.jarJar.archiveFile
    changelog = file(getRootDir().path + "/CHANGELOG.md").text
    type = STABLE
    modLoaders.add("neoforge")
    displayName = project.mod_version + " for NeoForge " + stonecutter.current.version

    modrinth {
        accessToken = providers.environmentVariable("MR_KEY")
        projectId = "NHzN2FGz"
        minecraftVersions.add(stonecutter.current.version)
        requires("fzzy-config")
        embeds("mixson")
    }

    curseforge {
        accessToken = providers.environmentVariable("CF_KEY")
        projectId = "1130102"
        minecraftVersions.add(stonecutter.current.version)
        javaVersions.add(stonecutter.eval(stonecutter.current.version, ">=1.20.5")
                ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17)
        clientRequired = true
        serverRequired = true
        requires("fzzy-config")
    }
}